import {
  Toast
} from "vant";
import {
  config
} from './config' // 引入配置的公共接口url
export default {
  install(Vue, options) {
    Vue.prototype.getUrlParam = function (name) {
      var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象  
      var r = window.location.search.substr(1).match(reg); //匹配目标参数  
      if (r != null) {
        return unescape(r[2]); //返回参数值 
      } else {
        return null;
      }
    }
    //分享开始
    Vue.prototype.start = function (vm) {
      var that = vm;
      var code = that.getUrlParam('code')
      var router = that.getUrlParam('router')
      var invitationId = that.getUrlParam('userId') || '';
      that.setLocalStorage('invitationId', invitationId)
      that.setLocalStorage('router', router)
      console.log(router)
      console.log(invitationId)
      // const local = window.location.href;
      var local = window.location.href
        .replace(/[/]/g, "%2f")
        .replace(/[:]/g, "%3a")
        .replace(/[#]/g, "%23")
        .replace(/[&]/g, "%26")
        .replace(/[=]/g, "%3d");
      var REDIRECT_URI = encodeURI('http://test.anshby.com/abapp/interface/wx/authorize?router=' + router + '%26userId=' + invitationId);
      if (code == '' || code == null) {
        window.location.href = `https://open.weixin.qq.com/connect/oauth2/authorize?appid=${that.config.APPID}&redirect_uri=${REDIRECT_URI}&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect`
      } else {
        that.weixinLogin({
          code: code
        }, loginCallBack)
      }

      function loginCallBack(datas) {
        var that = vm;
        that.$store.commit('setWxData', datas)
        that.setLocalStorage('wxData', JSON.stringify(datas))
        that.wxLogin(that)
        //分享问题逻辑 开年处理------------------------------------------------------
        that.$store.commit('setPath', that.$router.currentRoute)
        var url = location.href.split('#')[0];
        that.wxShare(url, that)

        // that.routerTo('UserCenter')
      }

    }
    Vue.prototype.wxShareCallBack = function (router, vm) { // 通用跳转方式，想转换成push 或者 replace
      console.log('检测是否支持js接口')
      var that = vm;
      var wxShare = JSON.parse(that.getLocalStorage('wxShare'))
      var strUrl = encodeURI(config.LOCAL + '?router=' + router.fullPath.split('/')[1] + '&userId=' + (that.getLocalStorage('userId') || ''))
      wx.showMenuItems({
        menuList: ['menuItem:share:appMessage', 'menuItem:share:timeline'] // 要显示的菜单项，所有menu项见附录3
      });
      // var strUrl = encodeURI(config.LOCAL + '?userId=' + (that.getLocalStorage('userId') || '') + "#/" + router.fullPath.split('/')[1])
      wx.hideMenuItems({ // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3
        menuList: ['menuItem:share:qq', 'menuItem:share:QZone', 'menuItem:openWithSafari', 'menuItem:copyUrl', 'menuItem:readMode', 'menuItem:originPage']
      });

      // if (that.$store.state.detail) { //是详情页就不能分享
      //   wx.hideMenuItems({ // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3
      //     menuList: ['menuItem:share:qq', 'menuItem:share:appMessage', 'menuItem:share:timeline', 'menuItem:share:QZone', 'menuItem:openWithSafari', 'menuItem:copyUrl', 'menuItem:readMode', 'menuItem:originPage']
      //   });
      // } else {
      //   wx.hideMenuItems({ // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3
      //     menuList: ['menuItem:share:qq', 'menuItem:share:QZone', 'menuItem:openWithSafari', 'menuItem:copyUrl', 'menuItem:readMode', 'menuItem:originPage']
      //   });
      // }

      console.log('检测支持js接口成功')
      if (that.$store.state.platform) {
        wx.ready(function (WXDate) { //需在用户可能点击分享按钮前就先调用
          wx.onMenuShareTimeline({
            title: router ? router.meta.title : '', // 分享标题
            desc: router ? router.meta.title : '', // 分享描述
            link: strUrl, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
            imgUrl: 'http://test.anshby.com/h5/static/img/logo.png', // 分享图标
            success: function () {
              // 设置成功
              Toast('分享成功')
              // alert(strUrl)
            },
            cancel: function () {
              // alert('取消分享')
            },
            fail: function () {
              // alert('分享失败')
            }
          })
          wx.onMenuShareAppMessage({
            title: router ? router.meta.title : '', // 分享标题
            desc: router ? router.meta.title : '', // 分享描述
            link: strUrl, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
            imgUrl: 'http://test.anshby.com/h5/static/img/logo.png', // 分享图标
            success: function () {
              // 设置成功
              Toast('分享成功')
              // alert(strUrl)
            },
            cancel: function () {
              // alert('取消分享')
            },
            fail: function () {
              // alert('分享失败')
            }
          })
        })
      }
    }
    Vue.prototype.getMyInfoCb = function (that) { //带参数跳转
      console.log('跳转开始')
      var router = Vue.prototype.getLocalStorage('router')
      Vue.prototype.removeLocalStorage('router')
      var href = window.location.href.split('#/')[0]
      if (router && router != 'null') {
        that.routerTo(router)
      }
    }
    //检测登录
    Vue.prototype.checkLogin = function (storage, stateComit, callback) { // 通用跳转方式，想转换成push 或者 replace
      var that = this;
      console.log('检测是否登录')
      if (storage == 'userData' && !this.getLocalStorage(storage)) {
        setTimeout(function () {
          that.routerTo('UserCenter')
        }, 1000)
        // console.log(JSON.parse(this.getLocalStorage(storage)))
      } else {
        if (!this.getLocalStorage(storage)) {
          callback ? callback(that) : ''
        } else {
          this.$store.commit(stateComit, JSON.parse(this.getLocalStorage(storage)))
          // console.log(JSON.parse(this.getLocalStorage(storage)))
          this.$store.commit('setUserId', JSON.parse(this.getLocalStorage('userData')).id)
        }
      }
      // if (!this.getLocalStorage(storage)) {
      //   callback ? callback(that) : ''
      // } else {
      //   this.$store.commit(stateComit, JSON.parse(this.getLocalStorage(storage)))
      //   console.log(JSON.parse(this.getLocalStorage(storage)))
      //   this.$store.commit('setUserId', JSON.parse(this.getLocalStorage('userData')).id)
      // }
    }
    //规范数据格式
    Vue.prototype.clearParams = function (object) { // 规范数据格式
      for (const key in object) {
        if (object.hasOwnProperty(key)) {
          const element = object[key];
          if (key == 'account') {
            object[key] = element.replace(/\s+/g, "");
          } else if (key == 'expDate') {
            object[key] = element.slice(2, element.length).replace('/', '')
          } else if (key == 'bankCode') {
            object['branchCode'] = element
          }
        }
      }
      return object
    }
    //压缩图片
    Vue.prototype.compress = function (file, callback) {
      console.log('compress')
      var that = this;
      var img = new Image();
      img.src = file;
      img.onload = function () {
        var initSize = img.src.length;
        var width = img.width;
        var height = img.height;
        var orientation = '';
        that.EXIF.getData(img, function () {
          orientation = that.EXIF.getTag(this, 'Orientation');
        });
        //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
        var ratio;
        if ((ratio = width * height / 4000000) > 1) {
          ratio = Math.sqrt(ratio);
          width /= ratio;
          height /= ratio;
        } else {
          ratio = 1;
        }
        var ctx = canvas.getContext('2d');
        canvas.width = width;
        canvas.height = height;
        //        铺底色
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        //如果图片像素大于100万则使用瓦片绘制
        var count;
        if ((count = width * height / 1000000) > 1) {
          count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片
          //            计算每块瓦片的宽和高
          var nw = ~~(width / count);
          var nh = ~~(height / count);

          tCanvas.width = nw;
          tCanvas.height = nh;
          var tctx = tCanvas.getContext('2d');
          for (var i = 0; i < count; i++) {
            for (var j = 0; j < count; j++) {
              tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
              ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
            }
          }
        } else {
          ctx.drawImage(img, 0, 0, width, height);
        }
        //修复ios上传图片的时候 被旋转的问题  
        if (orientation && orientation != "" && orientation != 1) {
          switch (orientation) {
            case 6: //需要顺时针（向左）90度旋转  
              Toast('运行到这里了')
              rotateImg(img, 'left', canvas);
              break;
            case 8: //需要逆时针（向右）90度旋转  
              rotateImg(img, 'right', canvas);
              break;
            case 3: //需要180度旋转  
              rotateImg(img, 'right', canvas); //转两次  
              rotateImg(img, 'right', canvas);
              break;
          }
        }

        //进行最小压缩
        var ndata = canvas.toDataURL('image/jpeg', 0.1);
        // console.log('压缩前：' + initSize);
        // console.log('压缩后：' + ndata.length);
        // console.log('压缩率：' + ~~(100 * (initSize - ndata.length) / initSize) + "%");
        tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
        callback ? callback(ndata) : '';
        return ndata;
      }

      function rotateImg(img, direction, canvas) {
        //最小与最大旋转方向，图片旋转4次后回到原方向      
        const min_step = 0;
        const max_step = 3;
        if (img == null) return;
        //img的高度和宽度不能在img元素隐藏后获取，否则会出错      
        let height = img.height;
        let width = img.width;
        let step = 2;
        if (step == null) {
          step = min_step;
        }
        if (direction == 'right') {
          step++;
          //旋转到原位置，即超过最大值      
          step > max_step && (step = min_step);
        } else {
          step--;
          step < min_step && (step = max_step);
        }
        //旋转角度以弧度值为参数      
        let degree = step * 90 * Math.PI / 180;
        let ctx = canvas.getContext('2d');
        switch (step) {
          case 0:
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(img, 0, 0);
            break;
          case 1:
            canvas.width = height;
            canvas.height = width;
            ctx.rotate(degree);
            ctx.drawImage(img, 0, -height);
            break;
          case 2:
            canvas.width = width;
            canvas.height = height;
            ctx.rotate(degree);
            ctx.drawImage(img, -width, -height);
            break;
          case 3:
            canvas.width = height;
            canvas.height = width;
            ctx.rotate(degree);
            ctx.drawImage(img, -width, 0);
            break;
        }
      }
    }
    Vue.prototype.checkLevel = function (type) { // 检测等级
      var str = ''
      switch (type) {
        case 1:
          str = '普通用户'
          break;
        case 2:
          str = '渠道经理'
          break;
        case 3:
          str = '团队经理'
          break;
        case 4:
          str = '门店经理'
          break;
        default:
          str = '普通用户'
          break;
      }
      return str;
    }
    //跳转地址
    Vue.prototype.routerTo = function (name, params) { // 通用跳转方式，想转换成push 或者 replace
      this.$router.push({
        name: name,
        params: params
      })
    }
    //设置localstorage
    Vue.prototype.getLocalStorage = function (key) {
      return window.sessionStorage.getItem(key)
    }
    Vue.prototype.setLocalStorage = function (key, value) {
      window.sessionStorage.setItem(key, value)
    }
    Vue.prototype.removeLocalStorage = function (key) {
      window.sessionStorage.removeItem(key)
    }

    Vue.prototype.routerBack = function (vm) {
      setTimeout(function () {
        vm.$router.go(-1)
      }, 1000)
    }
    //定时器
    Vue.prototype.countDown = function (item) {
      var countdown = 60;
      settime()

      function settime() {
        if (countdown == 0) {
          item.disabled = false;
          item.txt = '发送验证码'
          countdown = 60;
          return;
        } else {
          item.disabled = true;
          item.txt = countdown + 's' + '后重发'
          countdown--;
        }
        setTimeout(function () {
          settime()
        }, 1000)
      }
    }
    Vue.prototype.getMoneyFormat = function (number) {
      number = number + ''; //数字转换成字符串
      number = number.replace(/\,/g, ""); //将 , 转换为空
      //判断是否是数字
      if (isNaN(number) || number == "") {
        return "";
      }
      //四舍五入,保留2位
      number = Math.round(number * 100) / 100;
      //是否是负数
      if (number < 0) {
        return '-' + getFormatYuan(Math.floor(Math.abs(number) - 0) + '') + getFormatCents(Math.abs(number) - 0);
      } else {
        return getFormatYuan(Math.floor(number - 0) + '') + getFormatCents(number - 0);
      }
      //格式化整数
      function getFormatYuan(number) {
        //判断是否是0.几几
        if (number.length <= 3) {
          return (number == '' ? '0' : number);
        } else {
          var mod = number.length % 3; //求余
          //截取字符开头的数字
          var output = (mod == 0 ? '' : (number.substring(0, mod)));
          for (var i = 0; i < Math.floor(number.length / 3); i++) {
            //mod==0 && i==0 说明数字的长度被3整除；第一次循环的时候截取（0,3）位
            if ((mod == 0) && (i == 0)) {
              output += number.substring(mod + 3 * i, mod + 3 * i + 3);
            } else {
              output += ',' + number.substring(mod + 3 * i, mod + 3 * i + 3);
            }
          }
          return (output);
        }
      }
      //格式化小数
      function getFormatCents(amount) {
        amount = Math.round(((amount) - Math.floor(amount)) * 100);
        return (amount < 10 ? '.0' + amount : '.' + amount);
      }
    }
    Vue.prototype.formatDate = function (now) {
      var d = new Date(now * 1000);
      var month = parseInt(d.getMonth()) + 1;
      var day = parseInt(d.getDate());
      if (month < 10) {
        month = "0" + month;
      }
      if (day < 10) {
        day = "0" + day;
      }
      return d.getFullYear() + "-" + month + "-" + day;
    }
    /**
     * @desc 将时间戳转换为YYYY-MM-DD HH:ii
     * @access public
     * @param
     * @return string
     */

    Vue.prototype.formatDateTime = function (now) {
      var d = new Date(now * 1000);
      var hour = parseInt(d.getHours());
      var minute = parseInt(d.getMinutes());
      var second = parseInt(d.getSeconds())
      if (hour < 10) {
        hour = "0" + hour;
      }
      if (minute < 10) {
        minute = "0" + minute;
      }
      if (second < 10) {
        second = "0" + second
      }
      return Vue.prototype.formatDate(now) + " " + hour + ":" + minute + ":" + second;
    }
  }
}
